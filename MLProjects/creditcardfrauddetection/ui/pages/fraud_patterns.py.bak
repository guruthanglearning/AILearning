"""
Fraud Patterns Management page for the Credit Card Fraud Detection System.
"""

import streamlit as st
import pandas as pd
import json
import sys
import os
import datetime
import uuid

# Add parent directory to path to import api_client
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
from api_client import get_api_client

def display_fraud_patterns():
    """Display and allow management of fraud patterns."""
    # st.markdown("## Fraud Pattern Management")
    
    # Get API client
    api_client = get_api_client()
    
    # Initialize session state for patterns if not already present
    if 'fraud_patterns' not in st.session_state:
        # In a real implementation, this would call the API
        # For now, we'll use mock data as initial patterns
        st.session_state.fraud_patterns = [
            {
                "id": "pattern_001",
                "name": "High-value Electronics Purchase",
                "description": "Unusually high-value purchase from electronics retailer, especially from new device or unusual location.",
                "pattern": {
                    "merchant_category": "Electronics",
                    "transaction_type": "online",
                    "indicators": ["high_amount", "new_device", "unusual_location"]
                },
                "similarity_threshold": 0.85,
                "created_at": "2025-05-01T10:00:00Z"
            },
            {
                "id": "pattern_002",
                "name": "Multiple Small Transactions",
                "description": "Series of small transactions in rapid succession, testing card validity.",
                "pattern": {
                    "transaction_frequency": "high",
                    "amount_range": "low",
                    "time_window": "short"
                },
                "similarity_threshold": 0.80,
                "created_at": "2025-05-05T14:30:00Z"
            },
            {
                "id": "pattern_003",
                "name": "Foreign ATM Withdrawal",
                "description": "Cash withdrawal from ATM in a country where customer has no travel history.",
                "pattern": {
                    "transaction_type": "atm_withdrawal",
                    "location": "foreign",
                    "customer_travel_history": "none"
                },
                "similarity_threshold": 0.90,
                "created_at": "2025-05-10T09:15:00Z"
            }
        ]
    
    # Use patterns from session state
    patterns = st.session_state.fraud_patterns
    
    if patterns:
        st.markdown("### Existing Fraud Patterns")
        # Convert to DataFrame for easier display
        patterns_df = pd.DataFrame(patterns)
        # Convert the pattern column to a string for display
        patterns_df["pattern"] = patterns_df["pattern"].apply(lambda x: json.dumps(x, indent=2))
        st.dataframe(patterns_df, use_container_width=True)
    
    # Form to add new patterns
    st.markdown("### Add New Fraud Pattern")
    with st.form(key="add_pattern_form"):
        pattern_name = st.text_input("Pattern Name")
        pattern_description = st.text_area("Pattern Description")
        
        pattern_details = st.text_area(
            "Pattern Details (JSON format)",
            value='{\n  "merchant_category": "Electronics",\n  "transaction_type": "online",\n  "indicators": ["high_amount", "new_device"]\n}',
            height=150
        )
        
        similarity_threshold = st.slider(
            "Similarity Threshold",
            min_value=0.0,
            max_value=1.0,
            value=0.75,
            step=0.05
        )
        
        submit_button = st.form_submit_button(label="Add Pattern")
        
        if submit_button:
            try:
                # Validate JSON
                pattern_json = json.loads(pattern_details)
                
                # Create a new pattern with a unique ID and timestamp
                pattern_data = {
                    "id": f"pattern_{str(uuid.uuid4())[:8]}",
                    "name": pattern_name,
                    "description": pattern_description,
                    "pattern": pattern_json,
                    "similarity_threshold": similarity_threshold,
                    "created_at": datetime.datetime.now().isoformat()
                }
                
                # In a real implementation, this would call the API
                # api_client.add_fraud_pattern(pattern_data)
                
                # Add the new pattern to the session state
                st.session_state.fraud_patterns.append(pattern_data)
                st.success("Fraud pattern added successfully!")
                
                # Force a rerun to update the display
                st.rerun()
            except json.JSONDecodeError:
                st.error("Invalid JSON format in pattern details.")

def show_pattern_details(pattern_id):
    """Show detailed view of a specific fraud pattern."""
    # Try to find the pattern in the session state
    pattern = None
    for p in st.session_state.fraud_patterns:
        if p["id"] == pattern_id:
            pattern = p.copy()  # Make a copy to avoid modifying the original
            # Add mock analytics data for display
            pattern["matched_transactions"] = 37
            pattern["false_positives"] = 5
            pattern["effectiveness"] = 0.86
            break
    
    # If pattern not found, use a default mock pattern
    if not pattern:
        pattern = {
            "id": pattern_id,
            "name": "Pattern Not Found",
            "description": "The requested pattern could not be found.",
            "pattern": {},
            "similarity_threshold": 0.0,
            "created_at": datetime.datetime.now().isoformat(),
            "matched_transactions": 0,
            "false_positives": 0,
            "effectiveness": 0.0
        }
    
    st.markdown(f"## Pattern Details: {pattern['name']}")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown(f"**ID:** {pattern['id']}")
        st.markdown(f"**Created:** {pattern['created_at']}")
        st.markdown(f"**Similarity Threshold:** {pattern['similarity_threshold']}")
    
    with col2:        
        st.markdown(f"**Matched Transactions:** {pattern['matched_transactions']}")
        st.markdown(f"**False Positives:** {pattern['false_positives']}")
        st.markdown(f"**Effectiveness:** {pattern['effectiveness']*100:.1f}%")
    
    st.markdown("### Description")
    st.markdown(pattern['description'])
    
    st.markdown("### Pattern Definition")
    st.json(pattern['pattern'])
    
    # Edit pattern button
    if st.button("Edit Pattern"):
        st.session_state['editing_pattern'] = pattern
        st.rerun()

def edit_pattern(pattern):
    """Show form to edit an existing fraud pattern."""
    st.markdown(f"## Edit Pattern: {pattern['name']}")
    
    with st.form(key="edit_pattern_form"):
        pattern_name = st.text_input("Pattern Name", value=pattern['name'])
        pattern_description = st.text_area("Pattern Description", value=pattern['description'])
        
        pattern_details = st.text_area(
            "Pattern Details (JSON format)",
            value=json.dumps(pattern['pattern'], indent=2),
            height=150
        )
        
        similarity_threshold = st.slider(
            "Similarity Threshold",
            min_value=0.0,
            max_value=1.0,
            value=pattern['similarity_threshold'],
            step=0.05
        )
        
        submit_button = st.form_submit_button(label="Update Pattern")
        
        if submit_button:
            try:
                # Validate JSON
                pattern_json = json.loads(pattern_details)
                  updated_pattern = {
                    "id": pattern['id'],
                    "name": pattern_name,
                    "description": pattern_description,
                    "pattern": pattern_json,
                    "similarity_threshold": similarity_threshold,
                    "created_at": pattern.get('created_at', datetime.datetime.now().isoformat())
                }
                # In a real implementation, this would call the API
                # api_client.update_fraud_pattern(updated_pattern)
                
                # Update the pattern in session state
                for i, p in enumerate(st.session_state.fraud_patterns):
                    if p["id"] == pattern["id"]:
                        st.session_state.fraud_patterns[i] = updated_pattern
                        break
                
                st.success("Fraud pattern updated successfully!")
                st.session_state.pop('editing_pattern', None)
                st.rerun()
            except json.JSONDecodeError:
                st.error("Invalid JSON format in pattern details.")

def show_fraud_patterns():
    """Show the fraud patterns management page."""
    st.markdown("<h1 class='main-header'>Fraud Pattern Management</h1>", unsafe_allow_html=True)
    
    # Check if we're editing a pattern
    if 'editing_pattern' in st.session_state:
        edit_pattern(st.session_state['editing_pattern'])
    # Check if we're viewing a specific pattern
    elif 'viewing_pattern' in st.session_state:        
        show_pattern_details(st.session_state['viewing_pattern'])
        if st.button("Back to All Patterns"):
            st.session_state.pop('viewing_pattern', None)
            st.rerun()
    else:
        # Show all patterns
        display_fraud_patterns()
        
        # Demo: view pattern details
        st.markdown("### View Pattern Details")
        pattern_id = st.text_input("Enter Pattern ID to view details")
        if st.button("View Details"):
            if pattern_id:
                st.session_state['viewing_pattern'] = pattern_id
                st.rerun()
            else:
                st.warning("Please enter a pattern ID.")

if __name__ == "__main__":
    show_fraud_patterns()
